/**
 * Created by Mili on 2017/9/20.
 */

//预设
@baseNum: 12px;     // rem基数
@whiteC: #fff;      // 白色
@themeC: #FFC80B;   // 主题色
@textC1: #8492a6;   // text Color
@textC2: #ff6b38;   // text Color

/****
 ** 弹性盒子
 ** @dire: row | column
 ** @align: flex-start | center | flex-end
 ** @justify: flex-start | center | flex-end | space-between | space-around
****/
.fBox (@dire: row, @align: center, @justify: space-between) {
  display: flex;
  flex-direction: @dire;
  justify-content: @justify;
  align-items: @align;
}

.flex (@flex: 1) {
  flex: @flex;
}

/**
  盒子计算模型
  @type: border-box | content-box
 */
.boxSizing (@type: border-box) {
  box-sizing: @type;
}

//文本
.font (@size: @baseNum; @color: @whiteC; @line: @size) {
  font-size: unit(@size / @baseNum, rem);
  color: @color;
  line-height: unit(@line / @baseNum, rem);
}

//大小
.width (@size) when (ispercentage(@size)) {
  width: @size;
}

.width (@size) when (ispixel(@size)) {
  width: unit(@size / @baseNum, rem);
}

.minW (@size) when (ispercentage(@size)) {
  min-width: @size;
}

.minW (@size) when (ispixel(@size)) {
  min-width: unit(@size / @baseNum, rem);
}

.height (@size) when (ispercentage(@size)) {
  height: @size;
}

.height (@size) when (ispixel(@size)) {
  height: unit(@size / @baseNum, rem);
}

.minH (@size) when (ispercentage(@size)) {
  min-height: @size;
}

.minH (@size) when (ispixel(@size)) {
  min-height: unit(@size / @baseNum, rem);
}

//外边距
.marginT (@size) {
  margin-top: unit(@size / @baseNum, rem);
}

.marginB (@size) {
  margin-bottom: unit(@size / @baseNum, rem);
}

.marginL (@size) {
  margin-left: unit(@size / @baseNum, rem);
}

.marginR (@size) {
  margin-right: unit(@size / @baseNum, rem);
}

.margin (@size1) {
  margin: unit(@size1 / @baseNum, rem);
}

.margin (@size1, @size2) when (@size2 = auto) {
  margin: unit(@size1 / @baseNum, rem) @size2;
}

.margin (@size1, @size2) when (ispixel(@size2)) {
  margin: unit(@size1 / @baseNum, rem) unit(@size2 / @baseNum, rem);
}

.margin (@size1, @size2, @size3) {
  margin: unit(@size1 / @baseNum, rem) unit(@size2 / @baseNum, rem) unit(@size3 / @baseNum, rem);
}

.margin (@size1, @size2, @size3, @size4) {
  margin: unit(@size1 / @baseNum, rem) unit(@size2 / @baseNum, rem) unit(@size3 / @baseNum, rem) unit(@size4 / @baseNum, rem);
}

//内边距
.paddingT (@size) {
  padding-top: unit(@size / @baseNum, rem);
}

.paddingB (@size) {
  padding-bottom: unit(@size / @baseNum, rem);
}

.paddingL (@size) {
  padding-left: unit(@size / @baseNum, rem);
}

.paddingR (@size) {
  padding-right: unit(@size / @baseNum, rem);
}

.padding (@size1) {
  padding: unit(@size1 / @baseNum, rem);
}

.padding (@size1, @size2) when (@size2 = auto) {
  padding: unit(@size1 / @baseNum, rem) @size2;
}

.padding (@size1, @size2) when (ispixel(@size2)) {
  padding: unit(@size1 / @baseNum, rem) unit(@size2 / @baseNum, rem);
}

.padding (@size1, @size2, @size3) {
  padding: unit(@size1 / @baseNum, rem) unit(@size2 / @baseNum, rem) unit(@size3 / @baseNum, rem);
}

.padding (@size1, @size2, @size3, @size4) {
  padding: unit(@size1 / @baseNum, rem) unit(@size2 / @baseNum, rem) unit(@size3 / @baseNum, rem) unit(@size4 / @baseNum, rem);
}

//边框
.border (@width: 1px, @color, @radio: 0, @type: solid) {
  border: @type unit(@width / @baseNum, rem) @color;
  border-radius: unit(@radio / @baseNum, rem);
}

.borderRa (@radio) when (ispixel(@radio)) {
  border-radius: unit(@radio / @baseNum, rem);
}

.borderRa (@radio) when (ispercentage(@radio)) {
  border-radius: @radio;
}

.borderT (@width: 1px, @color, @type: solid) {
  border-top: unit(@width / @baseNum, rem) @color @type;
}

.borderB (@width: 1px, @color, @type: solid) {
  border-bottom: unit(@width / @baseNum, rem) @color @type;
}

.borderL (@width: 1px, @color, @type: solid) {
  border-left: unit(@width / @baseNum, rem) @color @type;
}

.borderR (@width: 1px, @color, @type: solid) {
  border-right: unit(@width / @baseNum, rem) @color @type;
}

